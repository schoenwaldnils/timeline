name: timeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1

      - name: Install nvm
        shell: bash -l {0}
        run: nvm install

      - name: node & npm install
        run: |
          rm -rf ./node_modules
          npm ci

      - name: lint js
        run: npm run lint:js

      - name: lint css
        run: npm run lint:css

  build:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1

      - name: Install nvm
        shell: bash -l {0}
        run: nvm install

      - name: node & npm install
        run: |
          rm -rf ./node_modules
          npm ci

      - name: export
        run: npm run export

      - name: lint html
        run: npm run lint:html

      - name: Cache build dir
        uses: actions/upload-artifact@v1
        with:
          name: nextBuild-${{github.sha}}
          path: out

  visual-regression-test:
    runs-on: ubuntu-latest
    needs: [test, build]
    env:
      PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}

    steps:
      - uses: actions/checkout@v1

      - name: Percy Test
        uses: percy/storybook-action@v0.1.2
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
        with:
          percy-flags: --widths=320 -t=500

  #
  #
  # DEPLOYMENT
  #

  deploy-master:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [test, build]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: 'eu-central-1' # optional: defaults to us-east-1

    steps:
      - name: Download nextBuild
        uses: actions/download-artifact@v1
        with:
          name: nextBuild-${{github.sha}}
          path: out

      - name: S3 Sync
        uses: jakejarvis/s3-sync-action@v0.5.0
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          SOURCE_DIR: 'out' # optional: defaults to entire repository
          DEST_DIR: 'production'

      - name: Invalidate Cloudfront
        uses: chetan/invalidate-cloudfront-action@v1.0
        env:
          DISTRIBUTION: ${{ secrets.DISTRIBUTION }}
          PATHS: '/*'

      - name: action-slack
        uses: 8398a7/action-slack@v2.7.0
        with:
          status: ${{ job.status }}
          author_name: Github deployment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()

  deploy-pr:
    if: contains(github.ref, 'pull')
    runs-on: ubuntu-latest
    needs: [test, build]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: 'eu-central-1' # optional: defaults to us-east-1

    steps:
      - name: Download nextBuild
        uses: actions/download-artifact@v1
        with:
          name: nextBuild-${{github.sha}}
          path: out

      - name: S3 Sync
        uses: jakejarvis/s3-sync-action@v0.5.0
        with:
          args: --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          SOURCE_DIR: 'out'
          DEST_DIR: 'pr/${{github.event.number}}'

      - name: s3cmd edit cache header
        uses: docker://jusbrasil/s3cmd-action:master
        with:
          args: modify --recursive --exclude "*" --include "*.css" --include "*.js" --include "*.png" --include "*.jpg" --include "*.gif" --include "*.svg" --add-header="Cache-Control:public,max-age=31536000" s3://${{ secrets.AWS_S3_BUCKET }}/pr/${{github.event.number}}/
        env:
          ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Invalidate Cloudfront
        uses: chetan/invalidate-cloudfront-action@v1.0
        env:
          DISTRIBUTION: ${{ secrets.DISTRIBUTION_PR }}
          PATHS: '/*'

      - name: action-slack
        uses: 8398a7/action-slack@v2.7.0
        with:
          status: ${{ job.status }}
          author_name: Github deployment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()

  lighthouse-check:
    runs-on: ubuntu-latest
    needs: [deploy-pr]
    steps:
      - uses: actions/checkout@master

      - name: Run Lighthouse
        uses: foo-software/lighthouse-check-action@v1.0.10
        id: lighthouseCheck
        with:
          accessToken: ${{ secrets.GITHUB_TOKEN }}
          author: ${{ github.actor }}
          awsBucket: ${{ secrets.AWS_S3_BUCKET_LIGHTHOUSE }}
          awsRegion: 'eu-central-1'
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          branch: ${{ github.ref }}
          urls: 'https://${{github.event.number}}.pr.timeline.schoen.world'
          sha: ${{ github.sha }}

      - name: Handle Lighthouse Check results
        uses: foo-software/lighthouse-check-status-action@master
        with:
          lighthouseCheckResults: ${{ steps.lighthouseCheck.outputs.lighthouseCheckResults }}
          minAccessibilityScore: '90'
          minBestPracticesScore: '50'
          minPerformanceScore: '70'
          minProgressiveWebAppScore: '50'
          minSeoScore: '50'
